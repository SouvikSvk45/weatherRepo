AWSTemplateFormatVersion: "2010-09-09"
Description: this is WeatherApp using s3 , Lambda and APIgateway
Resources:
  
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
                - s3.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Policies:
        - PolicyName: "MyLambdaPolicy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                Resource: "*"

      Description: IAM role for lambda to access s3 and dynamodb 
      ManagedPolicyArns: 
        - arn:aws:iam::aws:policy/AmazonS3FullAccess
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess
      RoleName: LambdaExecutionRole

  LambdaFunctionSpringFunction:
    DependsOn: LambdaExecutionRole
    Type: "AWS::Lambda::Function"
    Properties:
      MemorySize: 512
      Description: ""
      TracingConfig:
        Mode: "PassThrough"
      Timeout: 15
      RuntimeManagementConfig:
        UpdateRuntimeOn: "Auto"
      Handler: "com.example.weather_app.StreamLambdaHandler::handleRequest"
      Code:
        S3Bucket: svk-bucket
        S3Key: weather_app-0.0.1-SNAPSHOT.jar
      Role: !GetAtt LambdaExecutionRole.Arn
      Environment:
        Variables:
          TABLE_NAME: !Ref DynamoDBTableWeatherData
          SVK_AWS_REGION: 'us-east-1'
      FileSystemConfigs: []
      FunctionName: "SpringFunction"
      Runtime: "java21"
      PackageType: "Zip"
      LoggingConfig:
        LogFormat: "Text"
        LogGroup: "/aws/lambda/SpringFunction"
      RecursiveLoop: "Terminate"
      EphemeralStorage:
        Size: 512
      Architectures:
      - "x86_64"

  DynamoDBTableWeatherData:
    Type: "AWS::DynamoDB::Table"
    Properties:
      SSESpecification:
        SSEEnabled: false
      TableName: "Weather"
      AttributeDefinitions:
      - AttributeType: "S"
        AttributeName: "id"
      ContributorInsightsSpecification:
        Enabled: false
      BillingMode: "PAY_PER_REQUEST"
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: false
      KeySchema:
      - KeyType: "HASH"
        AttributeName: "id"
      DeletionProtectionEnabled: false
      TableClass: "STANDARD"
      Tags: []
      TimeToLiveSpecification:
        Enabled: false

  LambdaInvokPermissions:
          Type: AWS::Lambda::Permission
          Properties:
            FunctionName: !Ref LambdaFunctionSpringFunction
            Action: lambda:InvokeFunction
            Principal: apigateway.amazonaws.com
            SourceAccount: 651706771477
  
  SpringEventRule:
    Type: AWS::Events::Rule
    Properties:
      ScheduleExpression: "rate(5 minutes)"
      Targets:
        - Id: !Ref LambdaFunctionSpringFunction
          Arn: !GetAtt LambdaFunctionSpringFunction.Arn
      State: "ENABLED"
      Name: "SpringLambdaEvent"    
  
  SpringEventRuleToSpringFunctionConnector:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt LambdaFunctionSpringFunction.Arn
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt SpringEventRule.Arn

  MyApiGateway:
    Type: 'AWS::ApiGateway::RestApi'
    Properties:
      Name: MyApiGateway
      Description: API Gateway created from a YAML file

  MyApiDeployment:
    Type: 'AWS::ApiGateway::Deployment'
    Properties:
      RestApiId: !Ref MyApiGateway
      StageName: prod

Outputs:
  ApiUrl:
    Description: "URL of the API Gateway"
    Value: !Sub "https://${MyApiGateway}.execute-api.${AWS::Region}.amazonaws.com/prod/"
             
        


  

  
      

       


       

  
